import { ImageTransformations } from "./types.js";
import { Env, isValidHttpUrl } from "./url.js";

// PhotoURL is a URL for an image stored in the legacy Yext CDN, generated by the old PhotoServer.
//
// Newer resources will be assigned a FileURL, but older images will retain their existing PhotoURL.
//
// A PhotoURL starts with 'a.mktgcdn.com', and the path starts with 'p[-env]/', followed by a
// content hash segment. After the object id, most photo urls terminate with the filename
// '[width]x[height].[ext]'. However, there are two additional possibilities:
//   - The filename may be 'original' (no extension) for the pre-processed file.
//   - Before the filename, an Aspect Ratio segment may be inserted if the image was padded. In
//     practice, this is always '1.0000' as padding was only ever done to produce square images.
//
// Unlike FileURL, a PhotoURL does not indicate its partition; only the US partition is supported.
//
// Examples:
//
//	US Production: https://a.mktgcdn.com/p/contentHash/126x164.jpg
//	US Production: https://a.mktgcdn.com/p/contentHash/original
//	US Production: https://a.mktgcdn.com/p/contentHash/1.0000/164x164.jpg
//	US Sandbox: https://a.mktgcdn.com/p-sandbox/contentHash/126x164.jpg
export type PhotoUrl = {
  // Scheme is 'http' or 'https'.
  //
  // All files are served equivalently under both http and https; the scheme is retained from the
  // parsed input.
  scheme: string;

  // Env is the Yext environment of the URL.
  //
  // The environment defines the suffix appended to the path root '/p':
  // - yext.EnvProd: /p/
  // - yext.EnvSandbox: /p-sandbox/
  // - yext.EnvQA: /p-qa/
  // - yext.EnvDev: /p-dev/
  //
  // Note that the string value of yext.EnvSandbox is 'sbx' but in the path it's 'sandbox'.
  env: Env;

  // ContentHash is the content hash segment of the URL.
  //
  // This is always the hash of the original image, prior to any processing. This url may
  // represent a thumbnail, or an image that has undergone some other type of processing (aspect
  // ratio padding, color profile normalization, etc); in these cases, this may be a different
  // value than would be produced by actually retrieving the file and hashing it.
  contentHash: string;

  // AspectRatio is the aspect ratio segment of the file path.
  //
  // Padded images are uncommon; this will be nil for most URLs.
  aspectRatio?: number;

  // Name is the base name of the file.
  //
  // Usually it will be the image size, in pixels (WxH) which can be read by Dimensions, but it
  // may be another value (namely, 'original'). The file name is not validated; while in practice
  // it should either be 'original' or WxH, this is not enforced.
  name: string;

  // Extension is the file extension (including the leading .), or an empty string if none.
  extension: string;
};

export const parsePhotoUrl = (rawUrl: string) => {
  if (!isValidHttpUrl(rawUrl)) {
    console.error(`Invalid image url: ${rawUrl}.`);
    return;
  }

  return convertPhotoUrl(new URL(rawUrl));
};

export const convertPhotoUrl = (parsedUrl: URL): PhotoUrl | undefined => {
  const scheme = parsedUrl.protocol.slice(0, -1); // trim colon
  if (scheme !== "http" && scheme !== "https") {
    console.error(`Invalid scheme: ${parsedUrl}`);
    return;
  }

  if (parsedUrl.hostname !== "a.mktgcdn.com") {
    console.error(`Invalid host: ${parsedUrl}`);
    return;
  }

  if (!parsedUrl.pathname.startsWith("/p")) {
    console.error(`Invalid path: ${parsedUrl}`);
    return;
  }

  const pathParts = parsedUrl.pathname.replace(/^\//, "").split("/");
  if (pathParts.length < 3 || pathParts.length > 4) {
    console.error(`Invalid path: ${parsedUrl}`);
    return;
  }

  let env: Env;
  if (pathParts[0] === "p") {
    env = "prod";
  } else {
    switch (pathParts[0].replace("p-", "")) {
      case "sandbox": {
        env = "sbx";
        break;
      }
      case "qa": {
        env = "qa";
        break;
      }
      case "dev": {
        env = "dev";
        break;
      }
      default: {
        console.error(`Invalid path: ${parsedUrl}`);
        return;
      }
    }
  }

  const contentHash = pathParts[1];

  let aspectRatio = undefined;
  if (pathParts.length === 4) {
    if (!pathParts[2].includes(".")) {
      console.error(`Invalid aspect ratio: ${parsedUrl}`);
      return;
    }
    aspectRatio = parseFloat(pathParts[2]);
    if (Number.isNaN(aspectRatio) || pathParts[2].split(".")[1].length !== 4) {
      console.error(`Invalid aspect ratio: ${parsedUrl}`);
      return;
    }
  }

  const extAndName = pathParts[pathParts.length - 1].split(".");

  const extension = extAndName.length === 2 ? `.${extAndName[1]}` : "";
  const name = extAndName[0];

  return {
    scheme,
    env,
    contentHash,
    aspectRatio,
    name,
    extension,
  };
};

export const photoUrlToDynString = (
  photoUrl: PhotoUrl,
  width: number,
  height: number,
  imageTransformations?: ImageTransformations
) => {
  const dynUrl = "https://dyn.mktgcdn.com";
  let bucket = "p";
  switch (photoUrl.env) {
    case "prod": {
      break;
    }
    case "sbx": {
      bucket += "-sandbox";
      break;
    }
    default: {
      bucket += `-${photoUrl.env.toString()}`;
    }
  }

  const imageTransformationsString =
    imageTransformations && Object.keys(imageTransformations).length
      ? "," +
        Object.entries(imageTransformations)
          .map(([key, value]) => `${key}=${value}`)
          .join(",")
      : "";

  // ,fit=cover,format=avif,quality=60
  return `${dynUrl}/${bucket}/${photoUrl.contentHash}/width=${Math.round(
    width
  )},height=${Math.round(height)}${imageTransformationsString}`;
};
